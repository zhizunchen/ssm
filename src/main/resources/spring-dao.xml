<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       		http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置整合mybatis过程 -->
    <!-- 1: 配置数据库相关参数 -->
    <context:property-placeholder location="classpath:conf/${env}/jdbc-dev.properties"/>

    <!-- 2: 数据库连接池 -->
    <!-- 数据源配置 -->
    <bean id="dataSource" parent="abstractDataSource">
        <property name="url" value="${mysql.jdbc.jdbcUrl}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />
    </bean>
    <!-- Druid 连接池 Config -->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          abstract="true" init-method="init" destroy-method="close">
        <!-- 初始化连接个数 -->
        <property name="initialSize" value="${jdbc.datasource.initialSize}" />
        <!-- 最大连接个数 -->
        <property name="maxActive" value="${jdbc.datasource.maxActive}" />
        <!-- 最小连接个数 -->
        <property name="minIdle" value="${jdbc.datasource.minIdle}" />
        <!-- 获取连接时最大等待时间，单位毫秒 -->
        <property name="maxWait" value="${jdbc.datasource.maxWait}" />
        <!-- 是否缓存preparedStatement，Mysql下建议关闭-->
        <property name="poolPreparedStatements" value="${jdbc.datasource.poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${jdbc.datasource.maxOpenPreparedStatements}" />
        <!-- 检测是否有效的sql，如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnBorrow" value="${jdbc.datasource.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${jdbc.datasource.testOnReturn}" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis, 执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${jdbc.datasource.testWhileIdle}" />
        <!-- 单位：毫秒，有两个含义：
           1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接
           2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.datasource.timeBetweenEvictionRunsMillis}" />
        <!-- 连接保持空闲而不被驱逐的最长时间，单位：毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.datasource.minEvictableIdleTimeMillis}" />
        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="${jdbc.datasource.filters}" />
    </bean>

    <!-- 3: sessionFactoryBean-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mybatis全局配置文件 :mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.high.concurrency.demo.domain"/>
        <!--扫描sql配置文件:mapper需要xml文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
    </bean>

    <!-- 4：配置扫描Dao 动态实现dao接口，注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
        <property name="basePackage" value="com.high.concurrency.demo.dao"/>
    </bean>

    <!-- redis -->
    <bean id="redis" class="com.high.concurrency.demo.dao.cache.RedisDao">
        <constructor-arg index="0" value="127.0.0.1"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
</beans>